{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["#! /usr/local/bin/node\n/**\n *  sails-auto\n * Author: michael\n * Date: 28.09.15.\n * License: MIT\n */\n\"use strict\";\nconst mysql = require('mysql'),\n    arg = require('minimist')(process.argv.slice(2)),\n    log = console.log,\n    fs = require('fs');\n\nclass ModelCreator {\n    constructor(options) {\n        this.con = mysql.createConnection({\n            host: arg.host || arg.h,\n            user: arg.user || arg.u,\n            password: arg.password || arg.p,\n            database: arg.db || arg.d\n        });\n        this.con.query('SHOW COLUMNS FROM ??', [arg.model || arg.m], (err, res) => {\n            if (err) throw new Error(err);\n            this.handle(res);\n        });\n\n        this.template = `\n/**\n *\n * generated Model for ${arg.model || arg.m}\n *\n **/\n\n module.exports = {\n    ${arg.connection || arg.c ? '    connection: \\'' + (arg.connection || arg.c) + '\\',' : ''}\n    ${arg.tableName || arg.t ? '    tableName: \\'' + (arg.tableName || arg.t) + '\\',' : ''}\n\n`;\n        if (arg.createdAt) {\n            this.template += `    autoCreatedAt: false,\n`;\n        }\n        if (arg.updatedAt) {\n            this.template += `    autoUpdatedAt: false,\n    beforeUpdate: function(values,next) {\n        values.${arg.updatedAt} = new Date();\n        next();\n    },\n`        }\n\n        this.template += '    attributes: {'\n    }\n\n    handle(res) {\n        let template = this.template;\n        res.forEach(val => {\n            if (! (val.Key === 'PRI' || val.Field === 'createdAt' || val.Field === 'updatedAt')) {\n                let type = ModelCreator.checkDataType(val.Type);\n                template += `\n        ${val.Field} : {\n            columnName: '${val.Field}',\n            type: '${type}',\n            ${val.Default !== null && type === 'datetime' ? 'defaultsTo : function (){ return new Date(); },' : ''}\n            ${val.Null === 'NO' && val.Default === null ? 'required: true,' : ''}\n            ${val.Type.match(/\\(.*\\)/) ? 'size: ' + '\\'' + val.Type.match(/\\((.*)\\)/)[1] + '\\'' : ''}\n        },\n        `;\n            }\n            template = template.trim();\n        });\n        template = template.trim().replace(/,$/, '') + '\\n\\n    }\\n\\n};';\n        this.writeFile(template.replace(/^\\s*\\n/gm, ''));\n    }\n\n    writeFile(template) {\n        let out = arg.out || arg.o;\n        let model = arg.model || arg.m;\n        let fileName = out || model;\n        let extension = arg.ext || arg.e ? (arg.ext || arg.e) : '.js';\n        let ws = fs.createWriteStream(fileName + extension, 'utf8');\n        ws.write(template);\n        ws.end();\n        ws.on('finish', () => process.exit())\n    }\n\n    static checkDataType(type) {\n        if (type === \"tinyint(1)\" || type === \"boolean\") {\n            return 'boolean';\n        }\n        else if (type.match(/^(smallint|mediumint|tinyint|int|bigint)/)) {\n            return 'integer';\n        }\n        else if (type.match(/^string|varchar|varying|nvarchar|text|ntext$/)) {\n            return 'string';\n        }\n        else if (type.match(/^(date|time)/)) {\n            return 'datetime';\n        }\n        else if (type.match(/^(float|decimal)/)) {\n            return 'float';\n        }\n    }\n}\n\nnew ModelCreator();"]}